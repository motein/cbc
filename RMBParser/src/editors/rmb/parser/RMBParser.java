/* Generated By:JavaCC: Do not edit this line. RMBParser.java */
package editors.rmb.parser;

import java.io.*;
import java.util.*;
import java.lang.reflect.*;
import editors.rmb.parser.ast.*;
import editors.rmb.parser.exception.*;
import editors.rmb.parser.type.*;
import editors.rmb.parser.entity.*;
import editors.rmb.parser.entity.Parameter;
import editors.rmb.parser.utils.ErrorHandler;

public class RMBParser implements RMBParserConstants {

        static public AST parseFile(File file, LibraryLoader loader,
                                ErrorHandler errorHandler)
                                throws SyntaxException, FileException {
        return parseFile(file, loader, errorHandler, false); // turn off debugging by default
    }

        static public AST parseFile(File file, LibraryLoader loader,
                                ErrorHandler errorHandler, boolean debug)
                                throws SyntaxException, FileException {
        return newFileParser(file, loader, errorHandler, debug).parse();
    }

        static public Declarations parseDeclFile(File file,
                                             LibraryLoader loader,
                                             ErrorHandler errorHandler)
                                             throws SyntaxException,
                                                    FileException {
        return parseDeclFile(file, loader, errorHandler, false);
    }

    static public Declarations parseDeclFile(File file,
                                             LibraryLoader loader,
                                             ErrorHandler errorHandler,
                                             boolean debug)
                                             throws SyntaxException,
                                                    FileException {
        return newFileParser(file, loader, errorHandler, debug).parseDecls();
    }

    static final public String SOURCE_ENCODING = "UTF-8";

    static public RMBParser newFileParser(File file,
                                       LibraryLoader loader,
                                       ErrorHandler errorHandler,
                                       boolean debug)
                                       throws FileException {
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file), SOURCE_ENCODING));
            return new RMBParser(br, file.getPath(), loader, errorHandler, debug);
        }
        catch (FileNotFoundException ex) {
            throw new FileException(ex.getMessage());
        }
        catch (UnsupportedEncodingException ex) {
            throw new Error("UTF-8 is not supported??: " + ex.getMessage());
        }
    }

    private String sourceName;
    private LibraryLoader loader;
    private ErrorHandler errorHandler;
    private Set<String> knownTypedefs;

    // constructor
    private RMBParser(Reader s, String name, LibraryLoader loader, ErrorHandler errorHandler) {
                this(s, name, loader, errorHandler, false); // turn off debugging by default
        }

        // constructor
    private RMBParser(Reader s, String name, LibraryLoader loader, ErrorHandler errorHandler, boolean debug) {
        this(s);
        this.sourceName = name;
        this.loader = loader;
        this.errorHandler = errorHandler;
        this.knownTypedefs = new HashSet<String>();
        if (debug) {
                enable_tracing();
        }
        else {
                disable_tracing();
        }
    }

    private AST parse() throws SyntaxException {
        try {
            return compilation_unit();
        }
        catch (TokenMgrError err) {
            throw new SyntaxException(err.getMessage());
        }
        catch (ParseException ex) {
            throw new SyntaxException(ex.getMessage());
        }
        catch (LookaheadSuccess err) {
            throw new SyntaxException("syntax error");
        }
    }

    private Declarations parseDecls() throws SyntaxException {
        try {
            return declaration_file();
        }
        catch (TokenMgrError ex) {
            throw new SyntaxException(ex.getMessage());
        }
        catch (ParseException ex) {
            throw new SyntaxException(ex.getMessage());
        }
    }

    private void addKnownTypedefs(List<TypedefNode> typedefs) {
        for (TypedefNode n : typedefs) {
            addType(n.name());
        }
    }

    private void addType(String name) {
        knownTypedefs.add(name);
    }

    private IntegerLiteralNode integerNode(Location loc, String image) {
        long i = integerValue(image);
        return new IntegerLiteralNode(loc, IntegerTypeRef.intRef(), i);
    }

    private RealLiteralNode realNode(Location loc, String image) {
        double i = Double.parseDouble(image);
        return new RealLiteralNode(loc, RealTypeRef.realRef(), i);
    }

    private long integerValue(String image) {
        String s = image;
        if (s.startsWith("0x") || s.startsWith("0X")) { // hex
            return Long.parseLong(s.substring(2), 16);
        }
        else if (s.startsWith("0") && !s.equals("0")) { // octal
            return Long.parseLong(s.substring(1), 8);
        }
        else {
            return Long.parseLong(s, 10); // decimal
        }
    }

    private String stringValue(String _image) throws ParseException {
        int pos = 0;
        int idx;
        StringBuffer buf = new StringBuffer();
        String image = _image.substring(1, _image.length() - 1);

        while ((idx = image.indexOf("\\", pos)) >= 0) {
            buf.append(image.substring(pos, idx));
            if (image.length() >= idx + 4
                    && Character.isDigit(image.charAt(idx+1))
                    && Character.isDigit(image.charAt(idx+2))
                    && Character.isDigit(image.charAt(idx+3))) {
                buf.append(unescapeOctal(image.substring(idx+1, idx+4)));
                pos = idx + 4;
            }
            else {
                buf.append(unescapeSeq(image.charAt(idx+1)));
                pos = idx + 2;
            }
        }
        if (pos < image.length()) {
            buf.append(image.substring(pos, image.length()));
        }
        return buf.toString();
    }

    private static final int charMax = 255;

    private char unescapeOctal(String digits) throws ParseException {
        int i = Integer.parseInt(digits, 8);
        if (i > charMax) {
            throw new ParseException("octal character sequence too big: \\" + digits);
        }
        return (char)i;
    }

    private static final char bell = 7;
    private static final char backspace = 8;
    private static final char escape = 27;
    private static final char vt = 11;

    private char unescapeSeq(char c) throws ParseException {
        switch (c) {
        case '0': return '\0';
        case '"': return '"';
        case '\'': return '\'';
        case 'a': return bell;
        case 'b': return backspace;
        case 'e': return escape;
        case 'f': return '\f';
        case 'n': return '\n';
        case 'r': return '\r';
        case 't': return '\t';
        case 'v': return vt;
        default:
            throw new ParseException("unknown escape sequence: \"\\" + c);
        }
    }

    protected Location location(Token t) {
        return new Location(sourceName, t);
    }

  final public AST compilation_unit() throws ParseException {
    Token t;
    Declarations impdecls, decls;
            t = getToken(1);
    impdecls = import_stmts();
    decls = top_defs();
    jj_consume_token(0);
            decls.add(impdecls);
            {if (true) return new AST(location(t), decls);}
    throw new Error("Missing return statement in function");
  }

  final public Declarations declaration_file() throws ParseException {
    Declarations impdecls, decls = new Declarations();
    UndefinedFunction funcdecl;
    UndefinedVariable vardecl;
    impdecls = import_stmts();
            decls.add(impdecls);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COM:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      if (jj_2_1(2147483647)) {
        funcdecl = funcdecl();
                              decls.addFuncdecl(funcdecl);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COM:
          vardecl = vardecl();
                              decls.addVardecl(vardecl);
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    jj_consume_token(0);
            {if (true) return decls;}
    throw new Error("Missing return statement in function");
  }

  final public UndefinedFunction funcdecl() throws ParseException {
    TypeRef ret;
    String n;
    Params ps;
    jj_consume_token(COM);
    ret = typeref();
    n = name();
    jj_consume_token(53);
    ps = params();
    jj_consume_token(54);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 55:
      jj_consume_token(55);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
            TypeRef t = new FunctionTypeRef(ret, ps.parametersTypeRef());
            {if (true) return new UndefinedFunction(new TypeNode(t), n, ps);}
    throw new Error("Missing return statement in function");
  }

  final public UndefinedVariable vardecl() throws ParseException {
    TypeNode t;
    String n;
    jj_consume_token(COM);
    t = type();
    n = name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 55:
      jj_consume_token(55);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
            {if (true) return new UndefinedVariable(t, n);}
    throw new Error("Missing return statement in function");
  }

  final public Declarations import_stmts() throws ParseException {
    String libPath;
    Declarations impdecls = new Declarations();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOADSUB:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      libPath = import_stmt();
            try {
                System.out.println("Import Lib Path: " + libPath);
                Declarations decls = loader.loadLibrary(libPath, errorHandler);
                if (decls != null) {
                    impdecls.add(decls);
                    addKnownTypedefs(decls.typedefs());
                }
            }
            catch (CompileException ex) {
                {if (true) throw new ParseException(ex.getMessage());}
            }
    }
            {if (true) return impdecls;}
    throw new Error("Missing return statement in function");
  }

  final public String import_stmt() throws ParseException {
        Token stringToken;
    jj_consume_token(LOADSUB);
    jj_consume_token(ALL);
    jj_consume_token(FROM);
    stringToken = jj_consume_token(STRING_LITERAL);
                String libPath = stringToken.image;
            {if (true) return libPath.substring(1, libPath.length()-1);} // remove "

    throw new Error("Missing return statement in function");
  }

  final public Declarations top_defs() throws ParseException {
    Declarations decls = new Declarations();
    DefinedFunction defun;
    List<DefinedVariable> defvars;
    StmtNode stmt;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case REAL:
      case COMPLEX:
      case IF:
      case SELECT:
      case WHILE:
      case FOR:
      case REPEAT:
      case LOOP:
      case RETURN:
      case SUB:
      case GOTO:
      case GOSUB:
      case NOT:
      case OPTION:
      case IDENTIFIER:
      case INTEGER_LITERAL:
      case REAL_LITERAL:
      case STRING_LITERAL:
      case 53:
      case 59:
      case 60:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      if (jj_2_2(2147483647)) {
        defun = defun_with_label();
                                       decls.addDefun(defun);
      } else if (jj_2_3(2147483647)) {
        defun = defun_without_label();
                                            decls.addDefun(defun);
      } else if (jj_2_4(2)) {
        defvars = defvars();
                              decls.addDefvars(defvars);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case SELECT:
        case WHILE:
        case FOR:
        case REPEAT:
        case LOOP:
        case RETURN:
        case GOTO:
        case GOSUB:
        case NOT:
        case OPTION:
        case IDENTIFIER:
        case INTEGER_LITERAL:
        case REAL_LITERAL:
        case STRING_LITERAL:
        case 53:
        case 59:
        case 60:
          stmt = stmt();
                                  decls.addStmt(stmt);
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
            {if (true) return decls;}
    throw new Error("Missing return statement in function");
  }

  final public Params params() throws ParseException {
    List<Parameter> params = new ArrayList<Parameter>();
    Parameter param, param1;
    TypeNode t;
    String n;
    boolean isMatched = false;
    param1 = param();
                        params.add(param1);
                        t = param1.typeNode();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 57:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      if (jj_2_5(2)) {
        jj_consume_token(57);
        param = param();
                        params.add(param);
                        t = param.typeNode(); // keep TypeNode

      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 57:
          jj_consume_token(57);
          n = name();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 58:
            jj_consume_token(58);
                               isMatched = true;
            break;
          default:
            jj_la1[8] = jj_gen;
            ;
          }
                        param = new Parameter(t, n, isMatched); // Use the previous TypeNode for default type
                        params.add(param);
                        isMatched = false;
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
            {if (true) return new Params(param1.location(), params);}
    throw new Error("Missing return statement in function");
  }

  final public DefinedFunction defun_with_label() throws ParseException {
    Token t;
    String n;
    Params ps;
    BlockNode body;
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(56);
    jj_consume_token(SUB);
    n = name();
    jj_consume_token(53);
    ps = params();
    jj_consume_token(54);
    body = block();
    jj_consume_token(SUBEND);
                System.err.println("Labeled SUB -> " + t.toString());
                TypeRef t1 = VoidTypeRef.voidRef(location(t));
                TypeRef t2 = new FunctionTypeRef(t1, ps.parametersTypeRef());
            {if (true) return new DefinedFunction(true, t.toString(), new TypeNode(t2), n, ps, body);}
    throw new Error("Missing return statement in function");
  }

  final public DefinedFunction defun_without_label() throws ParseException {
    Token t;
    String n;
    Params ps;
    BlockNode body;
    t = jj_consume_token(SUB);
    n = name();
    jj_consume_token(53);
    ps = params();
    jj_consume_token(54);
    body = block();
    jj_consume_token(SUBEND);
                TypeRef t1 = VoidTypeRef.voidRef(location(t));
                TypeRef t2 = new FunctionTypeRef(t1, ps.parametersTypeRef());
            {if (true) return new DefinedFunction(true, new TypeNode(t2), n, ps, body);}
    throw new Error("Missing return statement in function");
  }

  final public List<DefinedVariable> defvars() throws ParseException {
    List<DefinedVariable> defs = new ArrayList<DefinedVariable>();
    TypeNode type;
    String name;
    type = type();
    name = name();
            defs.add(new DefinedVariable(true, type, name)); // not COM, so true.

    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 57:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_5;
      }
      jj_consume_token(57);
      name = name();
                defs.add(new DefinedVariable(true, type, name));
    }
            {if (true) return defs;}
    throw new Error("Missing return statement in function");
  }

  final public List<DefinedVariable> defvar_list() throws ParseException {
    List<DefinedVariable> result = new ArrayList<DefinedVariable>();
    List<DefinedVariable> vars;
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case REAL:
      case COMPLEX:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_6;
      }
      vars = defvars();
                       result.addAll(vars);
    }
            {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public BlockNode block() throws ParseException {
    Token t;
    List<DefinedVariable> vars;
    List<StmtNode> stmts;
                        t=getToken(1);
    vars = defvar_list();
    stmts = stmts();
            {if (true) return new BlockNode(location(t), vars, stmts);}
    throw new Error("Missing return statement in function");
  }

  final public Parameter param() throws ParseException {
    TypeNode t;
    String n;
    t = type();
    n = name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 58:
      jj_consume_token(58);
                              {if (true) return new Parameter(t, n, true);}
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
          {if (true) return new Parameter(t, n, false);}
    throw new Error("Missing return statement in function");
  }

  final public String name() throws ParseException {
  Token t;
    t = jj_consume_token(IDENTIFIER);
                     {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public TypeRef typeref_base() throws ParseException {
    Token t, name;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      t = jj_consume_token(INTEGER);
                          {if (true) return IntegerTypeRef.intRef(location(t));}
      break;
    case REAL:
      t = jj_consume_token(REAL);
                          {if (true) return RealTypeRef.realRef(location(t));}
      break;
    case COMPLEX:
      t = jj_consume_token(COMPLEX);
                          {if (true) return ComplexTypeRef.complexRef(location(t));}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public TypeRef typeref() throws ParseException {
    TypeRef ref;
    Token t;
    ParamTypeRefs params;
    ref = typeref_base();
    label_7:
    while (true) {
      if (jj_2_6(2)) {
        ;
      } else {
        break label_7;
      }
      jj_consume_token(53);
      t = jj_consume_token(INTEGER_LITERAL);
      jj_consume_token(54);
            ref = new ArrayTypeRef(ref, integerValue(t.image)); // fixed size array

    }
            {if (true) return ref;}
    throw new Error("Missing return statement in function");
  }

  final public TypeNode type() throws ParseException {
  TypeRef ref;
    ref = typeref();
                    {if (true) return new TypeNode(ref);}
    throw new Error("Missing return statement in function");
  }

  final public List<ExprNode> args() throws ParseException {
    List<ExprNode> args = new ArrayList<ExprNode>();
    ExprNode arg;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case IDENTIFIER:
    case INTEGER_LITERAL:
    case REAL_LITERAL:
    case STRING_LITERAL:
    case 53:
    case 59:
    case 60:
      arg = expr();
                   args.add(arg);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 57:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_8;
        }
        jj_consume_token(57);
        arg = expr();
                        args.add(arg);
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
            {if (true) return args;}
    throw new Error("Missing return statement in function");
  }

  final public List<ExprNode> args2() throws ParseException {
    List<ExprNode> args = new ArrayList<ExprNode>();
    ExprNode arg;
    arg = expr();
                     args.add(arg);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 57:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_9;
      }
      jj_consume_token(57);
      arg = expr();
                       args.add(arg);
    }
           {if (true) return args;}
    throw new Error("Missing return statement in function");
  }

  final public ExprNode postfix() throws ParseException {
    ExprNode expr, idx;
    String memb;
    List<ExprNode> args;
    expr = primary();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 53:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_10;
      }
      jj_consume_token(53);
      args = args();
      jj_consume_token(54);
                             expr = new FuncallNode(expr, args);
    }
            {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public ExprNode unary() throws ParseException {
    ExprNode n;
    TypeNode t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 59:
      jj_consume_token(59);
      n = term();
                          {if (true) return new UnaryOpNode("+", n);}
      break;
    case 60:
      jj_consume_token(60);
      n = term();
                          {if (true) return new UnaryOpNode("-", n);}
      break;
    case NOT:
      jj_consume_token(NOT);
      n = term();
                            {if (true) return new UnaryOpNode("!", n);}
      break;
    case IDENTIFIER:
    case INTEGER_LITERAL:
    case REAL_LITERAL:
    case STRING_LITERAL:
    case 53:
      n = postfix();
                          {if (true) return n;}
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ExprNode term() throws ParseException {
    TypeNode t;
    ExprNode n;
    n = unary();
                                      {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public ExprNode expr() throws ParseException {
    ExprNode lhs, rhs, expr;
    String op;
    if (jj_2_7(2147483647)) {
      lhs = term();
      jj_consume_token(61);
      rhs = expr();
            {if (true) return new AssignNode(lhs, rhs);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
      case IDENTIFIER:
      case INTEGER_LITERAL:
      case REAL_LITERAL:
      case STRING_LITERAL:
      case 53:
      case 59:
      case 60:
        expr = expr9();
            {if (true) return expr;}
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ExprNode expr1() throws ParseException {
  ExprNode l, r;
    l = term();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIV:
      case MOD:
      case 62:
      case 63:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 62:
        jj_consume_token(62);
        r = term();
                              l = new BinaryOpNode(l, "*", r);
        break;
      case 63:
        jj_consume_token(63);
        r = term();
                              l = new BinaryOpNode(l, "/", r);
        break;
      case MOD:
        jj_consume_token(MOD);
        r = term();
                                l = new BinaryOpNode(l, "MOD", r);
        break;
      case DIV:
        jj_consume_token(DIV);
        r = term();
                                l = new BinaryOpNode(l, "DIV", r);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
            {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public ExprNode expr2() throws ParseException {
  ExprNode l, r;
    l = expr1();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 59:
      case 60:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 59:
        jj_consume_token(59);
        r = expr1();
                                l = new BinaryOpNode(l, "+", r);
        break;
      case 60:
        jj_consume_token(60);
        r = expr1();
                                l = new BinaryOpNode(l, "-", r);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
            {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public ExprNode expr5() throws ParseException {
  ExprNode l, r;
    l = expr2();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXOR:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_13;
      }
      jj_consume_token(EXOR);
      r = expr2();
                                  l = new BinaryOpNode(l, "EXOR", r);
    }
            {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public ExprNode expr7() throws ParseException {
  ExprNode l, r;
    l = expr5();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 61:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 64:
        jj_consume_token(64);
        r = expr5();
                                 l = new BinaryOpNode(l, ">", r);
        break;
      case 65:
        jj_consume_token(65);
        r = expr5();
                                 l = new BinaryOpNode(l, "<", r);
        break;
      case 66:
        jj_consume_token(66);
        r = expr5();
                                 l = new BinaryOpNode(l, ">=", r);
        break;
      case 67:
        jj_consume_token(67);
        r = expr5();
                                 l = new BinaryOpNode(l, "<=", r);
        break;
      case 61:
        jj_consume_token(61);
        r = expr5();
                                l = new BinaryOpNode(l, "=", r);
        break;
      case 68:
        jj_consume_token(68);
        r = expr5();
                                 l = new BinaryOpNode(l, "<>", r);
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
            {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public ExprNode expr8() throws ParseException {
  ExprNode l, r;
    l = expr7();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_15;
      }
      jj_consume_token(AND);
      r = expr7();
                                 l = new LogicalAndNode(l, r);
    }
            {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public ExprNode expr9() throws ParseException {
  ExprNode l, r;
    l = expr8();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_16;
      }
      jj_consume_token(OR);
      r = expr8();
                                l = new LogicalOrNode(l, r);
    }
            {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public List<StmtNode> stmts() throws ParseException {
    List<StmtNode> ss = new ArrayList<StmtNode>();
    StmtNode s;
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case SELECT:
      case WHILE:
      case FOR:
      case REPEAT:
      case LOOP:
      case RETURN:
      case GOTO:
      case GOSUB:
      case NOT:
      case OPTION:
      case IDENTIFIER:
      case INTEGER_LITERAL:
      case REAL_LITERAL:
      case STRING_LITERAL:
      case 53:
      case 59:
      case 60:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_17;
      }
      s = stmt();
                if (s != null) ss.add(s);
    }
            {if (true) return ss;}
    throw new Error("Missing return statement in function");
  }

  final public StmtNode stmt() throws ParseException {
    StmtNode n = null;
    ExprNode e = null;
    List<ExprNode> args = new ArrayList<ExprNode>();
    Token t;
    if (jj_2_8(3)) {
      n = option_base_stmt();
      jj_consume_token(NEWLINE);
    } else if (jj_2_9(2)) {
      n = labeled_stmt();
      jj_consume_token(NEWLINE);
    } else if (jj_2_10(3)) {
      t = jj_consume_token(IDENTIFIER);
      args = args();
      jj_consume_token(NEWLINE);
                                                           e = new VariableNode(location(t), t.image); e = new FuncallNode(e, args); n = new ExprStmtNode(e.location(), e);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
      case IDENTIFIER:
      case INTEGER_LITERAL:
      case REAL_LITERAL:
      case STRING_LITERAL:
      case 53:
      case 59:
      case 60:
        e = expr();
        jj_consume_token(NEWLINE);
                          n = new ExprStmtNode(e.location(), e);
        break;
      case LOOP:
        n = loop_stmt();
        break;
      case REPEAT:
        n = repeat_stmt();
        break;
      case IF:
        n = if_stmt();
        break;
      case WHILE:
        n = while_stmt();
        break;
      case FOR:
        n = for_stmt();
        break;
      case SELECT:
        n = switch_stmt();
        break;
      case GOTO:
        n = goto_stmt();
        break;
      case GOSUB:
        n = gosub_stmt();
        break;
      case RETURN:
        n = return_stmt();
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
            {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public OptionBaseNode option_base_stmt() throws ParseException {
    Token t, n;
    t = jj_consume_token(OPTION);
    jj_consume_token(BASE);
    n = jj_consume_token(INTEGER_LITERAL);
            {if (true) return new OptionBaseNode(location(t), integerValue(n.image));}
    throw new Error("Missing return statement in function");
  }

  final public LabelNode labeled_stmt() throws ParseException {
    Token t;
    StmtNode n;
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(56);
    n = stmt();
            {if (true) return new LabelNode(location(t), t.image, n);}
    throw new Error("Missing return statement in function");
  }

  final public GotoNode goto_stmt() throws ParseException {
  Token t, name;
    if (jj_2_11(2)) {
      t = jj_consume_token(GOTO);
      name = jj_consume_token(INTEGER_LITERAL);
                                                   {if (true) return new GotoNode(location(t), name.image, false);}
    } else if (jj_2_12(2)) {
      t = jj_consume_token(GOTO);
      name = jj_consume_token(IDENTIFIER);
                                             {if (true) return new GotoNode(location(t), name.image, true);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public GoSubNode gosub_stmt() throws ParseException {
  Token t, name;
    if (jj_2_13(2)) {
      t = jj_consume_token(GOSUB);
      name = jj_consume_token(INTEGER_LITERAL);
                                                    {if (true) return new GoSubNode(location(t), name.image, false);}
    } else if (jj_2_14(2)) {
      t = jj_consume_token(GOSUB);
      name = jj_consume_token(IDENTIFIER);
                                              {if (true) return new GoSubNode(location(t), name.image, true);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ReturnNode return_stmt() throws ParseException {
    Token t;
    ExprNode expr;
    if (jj_2_15(2)) {
      t = jj_consume_token(RETURN);
                                {if (true) return new ReturnNode(location(t), null);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RETURN:
        t = jj_consume_token(RETURN);
        expr = expr();
                               {if (true) return new ReturnNode(location(t), expr);}
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public IfNode if_stmt() throws ParseException {
    Token t;
    ExprNode cond;
    StmtNode thenBody, elseBody = null;
    t = jj_consume_token(IF);
    jj_consume_token(53);
    cond = expr();
    jj_consume_token(54);
    jj_consume_token(THEN);
    thenBody = stmt();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      elseBody = stmt();
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    jj_consume_token(END);
    jj_consume_token(IF);
            {if (true) return new IfNode(location(t), cond, thenBody, elseBody);}
    throw new Error("Missing return statement in function");
  }

  final public WhileNode while_stmt() throws ParseException {
    Token t;
    ExprNode cond;
    StmtNode body;
    t = jj_consume_token(WHILE);
    cond = expr();
    body = stmt();
    jj_consume_token(END);
    jj_consume_token(WHILE);
            {if (true) return new WhileNode(location(t), cond, body);}
    throw new Error("Missing return statement in function");
  }

  final public ForNode for_stmt() throws ParseException {
    Token t;
    ExprNode init = null, cond = null, incr = null;
    StmtNode body;
    t = jj_consume_token(FOR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case IDENTIFIER:
    case INTEGER_LITERAL:
    case REAL_LITERAL:
    case STRING_LITERAL:
    case 53:
    case 59:
    case 60:
      init = expr();
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TO:
      jj_consume_token(TO);
      cond = expr();
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STEP:
      jj_consume_token(STEP);
      incr = expr();
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    body = stmt();
    jj_consume_token(NEXT);
    jj_consume_token(IDENTIFIER);
            {if (true) return new ForNode(location(t), init, cond, incr, body);}
    throw new Error("Missing return statement in function");
  }

  final public LoopNode loop_stmt() throws ParseException {
    Token t;
    List<ExprNode> conds = new ArrayList<ExprNode>();
    List<StmtNode> stmts = new ArrayList<StmtNode>();
    ExprNode cond = null;
    StmtNode stmt = null;
    t = jj_consume_token(LOOP);
    jj_consume_token(NEWLINE);
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case SELECT:
      case WHILE:
      case FOR:
      case REPEAT:
      case LOOP:
      case RETURN:
      case GOTO:
      case GOSUB:
      case NOT:
      case OPTION:
      case EXIT:
      case IDENTIFIER:
      case INTEGER_LITERAL:
      case REAL_LITERAL:
      case STRING_LITERAL:
      case 53:
      case 59:
      case 60:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_18;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case SELECT:
      case WHILE:
      case FOR:
      case REPEAT:
      case LOOP:
      case RETURN:
      case GOTO:
      case GOSUB:
      case NOT:
      case OPTION:
      case IDENTIFIER:
      case INTEGER_LITERAL:
      case REAL_LITERAL:
      case STRING_LITERAL:
      case 53:
      case 59:
      case 60:
        stmt = stmt();
                                    stmts.add(stmt);
        break;
      case EXIT:
        jj_consume_token(EXIT);
        jj_consume_token(IF);
        cond = expr();
        jj_consume_token(NEWLINE);
                                       conds.add(cond);
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(END);
    jj_consume_token(LOOP);
            {if (true) return new LoopNode(location(t), conds, stmts);}
    throw new Error("Missing return statement in function");
  }

  final public RepeatNode repeat_stmt() throws ParseException {
    Token t;
    ExprNode cond;
    List<StmtNode> body = new ArrayList<StmtNode>();
    StmtNode stmt;
    t = jj_consume_token(REPEAT);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case SELECT:
      case WHILE:
      case FOR:
      case REPEAT:
      case LOOP:
      case RETURN:
      case GOTO:
      case GOSUB:
      case NOT:
      case OPTION:
      case IDENTIFIER:
      case INTEGER_LITERAL:
      case REAL_LITERAL:
      case STRING_LITERAL:
      case 53:
      case 59:
      case 60:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_19;
      }
      stmt = stmt();
                              body.add(stmt);
    }
    jj_consume_token(UNTIL);
    cond = expr();
            {if (true) return new RepeatNode(location(t), cond, body);}
    throw new Error("Missing return statement in function");
  }

  final public SwitchNode switch_stmt() throws ParseException {
    Token t;
    ExprNode cond;
    List<CaseNode> bodies;
    t = jj_consume_token(SELECT);
    cond = expr();
    bodies = case_clauses();
    jj_consume_token(END);
    jj_consume_token(SELECT);
            {if (true) return new SwitchNode(location(t), cond, bodies);}
    throw new Error("Missing return statement in function");
  }

  final public List<CaseNode> case_clauses() throws ParseException {
    List<CaseNode> clauses = new ArrayList<CaseNode>();
    CaseNode n;
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        ;
        break;
      default:
        jj_la1[39] = jj_gen;
        break label_20;
      }
      n = case_clause();
                       clauses.add(n);
    }
            {if (true) return clauses;}
    throw new Error("Missing return statement in function");
  }

  final public CaseNode case_clause() throws ParseException {
    List<ExprNode> values;
    BlockNode body;
    if (jj_2_16(2)) {
      jj_consume_token(CASE);
      jj_consume_token(ELSE);
      body = case_body();
                                      {if (true) return new CaseElseNode(body.location(), body);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        values = cases();
        body = case_body();
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                                        {if (true) return new CaseNode(body.location(), values, body);}
    throw new Error("Missing return statement in function");
  }

  final public List<ExprNode> cases() throws ParseException {
    List<ExprNode> values = new ArrayList<ExprNode>();
    ExprNode n;
    label_21:
    while (true) {
      jj_consume_token(CASE);
      n = primary();
                          values.add(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_21;
      }
    }
            {if (true) return values;}
    throw new Error("Missing return statement in function");
  }

  final public BlockNode case_body() throws ParseException {
    LinkedList<StmtNode> stmts = new LinkedList<StmtNode>();
    StmtNode s;
    label_22:
    while (true) {
      s = stmt();
                if (s != null) stmts.add(s);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case SELECT:
      case WHILE:
      case FOR:
      case REPEAT:
      case LOOP:
      case RETURN:
      case GOTO:
      case GOSUB:
      case NOT:
      case OPTION:
      case IDENTIFIER:
      case INTEGER_LITERAL:
      case REAL_LITERAL:
      case STRING_LITERAL:
      case 53:
      case 59:
      case 60:
        ;
        break;
      default:
        jj_la1[42] = jj_gen;
        break label_22;
      }
    }
            {if (true) return new BlockNode(stmts.get(0).location(),
                                 new ArrayList<DefinedVariable>(),
                                 stmts);}
    throw new Error("Missing return statement in function");
  }

  final public ExprNode primary() throws ParseException {
    Token t;
    ExprNode n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
            {if (true) return integerNode(location(t), t.image);}
      break;
    case REAL_LITERAL:
      t = jj_consume_token(REAL_LITERAL);
            {if (true) return realNode(location(t), t.image);}
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
            {if (true) return new StringLiteralNode(location(t),
                StringTypeRef.stringRef(),
                stringValue(t.image));}
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
            {if (true) return new VariableNode(location(t), t.image);}
      break;
    case 53:
      jj_consume_token(53);
      n = expr();
      jj_consume_token(54);
            {if (true) return n;}
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(REAL)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(CASE)) return true;
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(60)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(59)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_55()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_56()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(RETURN)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(68)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(57)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(61)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(67)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(53)) return true;
    if (jj_3R_29()) return true;
    if (jj_scan_token(54)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_47()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_48()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(66)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_3R_57()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_58()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(COM)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(53)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(65)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(64)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(GOSUB)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(GOSUB)) return true;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(SUB)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(53)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(GOTO)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(EXOR)) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(GOTO)) return true;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_59()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_60()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(56)) return true;
    if (jj_scan_token(SUB)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(53)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(53)) return true;
    if (jj_3R_42()) return true;
    if (jj_scan_token(54)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(60)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(59)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(56)) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_61()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_62()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(57)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_42()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_43()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_31()) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(DIV)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(REAL_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(MOD)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_69()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_70()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(OPTION)) return true;
    if (jj_scan_token(BASE)) return true;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(63)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(62)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_26()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_71()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_26()) return true;
    if (jj_scan_token(61)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(53)) return true;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    if (jj_scan_token(54)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_29()) return true;
    if (jj_scan_token(NEWLINE)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_6()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_3R_26()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(COMPLEX)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public RMBParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[44];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x35a34870,0x31a34800,0x0,0x0,0x0,0x0,0x70,0x0,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x31a34800,0x31a34800,0x1000000,0x2000,0x0,0x40000,0x80000,0x31a34800,0x31a34800,0x31a34800,0x8000,0x8000,0x8000,0x31a34800,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1,0x1,0x800000,0x800000,0x400,0x183e4010,0x183e4010,0x2000000,0x4000000,0x2000000,0x2000000,0x0,0x4000000,0x0,0x2000000,0x183e0010,0x2000000,0x200000,0x183e0010,0x183e0010,0xc0000220,0xc0000220,0x18000000,0x18000000,0x40,0x20000000,0x20000000,0x100,0x80,0x183e4010,0x183e0010,0x0,0x0,0x183e0010,0x0,0x0,0x183f4010,0x183f4010,0x183e4010,0x0,0x0,0x0,0x183e4010,0x3e0000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1f,0x1f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[16];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public RMBParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public RMBParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RMBParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public RMBParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RMBParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public RMBParser(RMBParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(RMBParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[69];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 44; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 69; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 16; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
