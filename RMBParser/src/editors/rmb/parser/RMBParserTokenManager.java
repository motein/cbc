/* Generated By:JavaCC: Do not edit this line. RMBParserTokenManager.java */
package editors.rmb.parser;
import java.io.*;
import java.util.*;
import java.lang.reflect.*;
import editors.rmb.parser.ast.*;
import editors.rmb.parser.exception.*;
import editors.rmb.parser.type.*;
import editors.rmb.parser.entity.*;
import editors.rmb.parser.entity.Parameter;
import editors.rmb.parser.utils.ErrorHandler;

/** Token Manager. */
public class RMBParserTokenManager implements RMBParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1fffffffffff0L) != 0L)
         {
            jjmatchedKind = 49;
            return 22;
         }
         if ((active0 & 0x1000000000000000L) != 0L)
            return 23;
         return -1;
      case 1:
         if ((active0 & 0x8000040800L) != 0L)
            return 22;
         if ((active0 & 0x1ff7ffffbf7f0L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 1;
            return 22;
         }
         return -1;
      case 2:
         if ((active0 & 0xb394e0206c0L) != 0L)
            return 22;
         if ((active0 & 0x1f446b1f9f130L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 49;
               jjmatchedPos = 2;
            }
            return 22;
         }
         return -1;
      case 3:
         if ((active0 & 0x4402a9614150L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 3;
            return 22;
         }
         if ((active0 & 0x1b0441098b020L) != 0L)
            return 22;
         return -1;
      case 4:
         if ((active0 & 0x2a0410100L) != 0L)
            return 22;
         if ((active0 & 0x440009204050L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 4;
            return 22;
         }
         return -1;
      case 5:
         if ((active0 & 0x40000000050L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 5;
            return 22;
         }
         if ((active0 & 0x400009204000L) != 0L)
            return 22;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         jjmatchedKind = 53;
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x0L);
      case 41:
         return jjStopAtPos(0, 54);
      case 42:
         return jjStopAtPos(0, 62);
      case 43:
         return jjStopAtPos(0, 59);
      case 44:
         return jjStopAtPos(0, 57);
      case 45:
         return jjStartNfaWithStates_0(0, 60, 23);
      case 47:
         return jjStopAtPos(0, 63);
      case 58:
         return jjStopAtPos(0, 56);
      case 59:
         return jjStopAtPos(0, 55);
      case 60:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x18L);
      case 61:
         return jjStopAtPos(0, 61);
      case 62:
         jjmatchedKind = 64;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4L);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x90000000000L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x200100008040L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x2040000080L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x1004800002000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x100080020000L, 0x0L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x32000000L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x810L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x40000800400L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x20000000200L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x1000100000L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x408000000000L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x1200120L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x40c084000L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x41000L, 0x0L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x0L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0L);
      case 61:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(1, 66);
         else if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         break;
      case 62:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(1, 68);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0xa00200008200L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x43304520L, active1, 0L);
      case 70:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(1, 11, 22);
         break;
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x11000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000080L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000002000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x10880400010L, active1, 0L);
      case 79:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(1, 18, 22);
         return jjMoveStringLiteralDfa2_0(active0, 0x61130820040L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0L);
      case 82:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 39, 22);
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x400080000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0xc000000L, active1, 0L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0x1004000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 41:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(2, 58);
         break;
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000020L);
      case 66:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      case 68:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 35, 22);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 40, 22);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 41, 22);
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x80081000L);
      case 70:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 30, 22);
         break;
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000010000L);
      case 76:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 43, 22);
         return jjMoveStringLiteralDfa3_0(active0, 0x200000004000L);
      case 77:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 7, 22);
         else if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x40L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x104400800000L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
      case 82:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 17, 22);
         break;
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x80002000a000L);
      case 84:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 9, 22);
         else if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 22);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 25, 22);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 36, 22);
         return jjMoveStringLiteralDfa3_0(active0, 0x400011400010L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L);
      case 86:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 37, 22);
         break;
      case 88:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L);
      case 69:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 22);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 22);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 47, 22);
         return jjMoveStringLiteralDfa4_0(active0, 0x8204010L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000400100L);
      case 76:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 5, 22);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 22);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 77:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 22);
         break;
      case 78:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 22);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L);
      case 79:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 22);
         break;
      case 80:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 22);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 22);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 22);
         return jjMoveStringLiteralDfa4_0(active0, 0x40L);
      case 82:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 22);
         break;
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L);
      case 84:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 22);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 22);
         break;
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x21000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      case 66:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 22);
         break;
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 68:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 22);
         break;
      case 69:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 22);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 22);
         break;
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0x10L);
      case 76:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 22, 22);
         return jjMoveStringLiteralDfa5_0(active0, 0x40L);
      case 77:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 22);
         break;
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
      case 83:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 27, 22);
         break;
      case 69:
         return jjMoveStringLiteralDfa6_0(active0, 0x50L);
      case 78:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 22);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 22);
         break;
      case 84:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 14, 22);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 22);
         break;
      case 85:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 66:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 42, 22);
         break;
      case 82:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 4, 22);
         break;
      case 88:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 6, 22);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   //int[] nextStates; // not used
   int startsAt = 0;
   jjnewStateCnt = 22;
   int i = 1;
   jjstateSet[0] = startState;
   //int j; // not used
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 49)
                        kind = 49;
                     jjCheckNAddTwoStates(8, 9);
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 49)
                        kind = 49;
                  }
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     jjCheckNAdd(11);
                  }
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAddStates(0, 2);
                  }
                  else if ((0x100001200L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                     jjCheckNAdd(0);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 2)
                        kind = 2;
                     jjCheckNAdd(1);
                  }
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(10, 12);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(19, 20);
                  else if (curChar == 33)
                  {
                     if (kind > 3)
                        kind = 3;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     jjCheckNAdd(11);
                  }
                  break;
               case 0:
                  if ((0x100001200L & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(3, 5);
                  break;
               case 4:
                  if ((0x2400L & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 5:
                  if (curChar == 10 && kind > 3)
                     kind = 3;
                  break;
               case 6:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddTwoStates(8, 9);
                  break;
               case 9:
                  if (curChar == 36 && kind > 49)
                     kind = 49;
                  break;
               case 10:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(11);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddStates(0, 2);
                  break;
               case 13:
                  if (curChar != 46)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddTwoStates(14, 15);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddTwoStates(14, 15);
                  break;
               case 16:
                  if (curChar == 45)
                     jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(17);
                  break;
               case 18:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 19:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 20:
                  if (curChar == 34 && kind > 52)
                     kind = 52;
                  break;
               case 21:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(10, 12);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 22:
               case 8:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddTwoStates(8, 9);
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddTwoStates(8, 9);
                  break;
               case 3:
                  if (kind > 3)
                     kind = 3;
                  jjAddStates(3, 5);
                  break;
               case 15:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(6, 7);
                  break;
               case 19:
                  jjAddStates(8, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjAddStates(3, 5);
                  break;
               case 19:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(8, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 22 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   12, 13, 15, 3, 4, 6, 16, 17, 19, 20, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, "\111\116\124\105\107\105\122", "\122\105\101\114", 
"\103\117\115\120\114\105\130", "\104\111\115", "\122\105\104\111\115", "\115\101\124", "\114\105\124", 
"\111\106", "\124\110\105\116", "\105\114\123\105", "\123\105\114\105\103\124", 
"\103\101\123\105", "\127\110\111\114\105", "\106\117\122", "\124\117", "\123\124\105\120", 
"\116\105\130\124", "\122\105\120\105\101\124", "\125\116\124\111\114", "\114\117\117\120", 
"\122\105\124\125\122\116", "\107\105\124", "\123\125\102", "\123\125\102\105\116\104", 
"\107\117\124\117", "\107\117\123\125\102", "\104\105\106", "\106\116\105\116\104", 
"\103\117\115", "\120\101\125\123\105", "\123\124\117\120", "\105\116\104", "\116\117\124", 
"\104\111\126", "\105\130\117\122", "\117\122", "\101\116\104", "\115\117\104", 
"\114\117\101\104\123\125\102", "\101\114\114", "\106\122\117\115", "\103\101\114\114", 
"\117\120\124\111\117\116", "\102\101\123\105", "\105\130\111\124", null, null, null, null, "\50", "\51", 
"\73", "\72", "\54", "\50\52\51", "\53", "\55", "\75", "\52", "\57", "\76", "\74", 
"\76\75", "\74\75", "\74\76", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xfffffffffffffff1L, 0x1fL, 
};
static final long[] jjtoSkip = {
   0xeL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0xeL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[22];
private final int[] jjstateSet = new int[44];
protected char curChar;
/** Constructor. */
public RMBParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public RMBParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 22; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String tokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   tokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, tokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  //int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
