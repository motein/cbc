options {
    STATIC = false;
    JDK_VERSION = "1.8";
}

PARSER_BEGIN(LanguageWithNewLineParser)
package parser;
import java.io.*;
import java.util.*;

public class LanguageWithNewLineParser {

    static public long evaluateAdd(String src) throws ParseException {
        Reader reader = new StringReader(src);
        return new LanguageWithNewLineParser(reader).add();
    }

    static public List<List<Token>> evaluateLines(String src) throws ParseException {
        Reader reader = new StringReader(src);
        return new LanguageWithNewLineParser(reader).lines();
    }
}
PARSER_END(LanguageWithNewLineParser)

SKIP: { <[" ", "\t"]> }
TOKEN: {
	<IDENTIFIER: ["a"-"z"] (["a"-"z", "0"-"9"])*>
    | <NEWLINE: ("\r\n" | "\r" | "\n")>
    | <LINE_COMMENT: "!" (~["\n", "\r"])* ("\n" | "\r\n" | "\r")?>
}

TOKEN: {
    <INTEGER:(["0"-"9"])+>
}

long add():
{
    Token x, y;
}
{
    x=<INTEGER> "+" y=<INTEGER> <EOF>
        {
            return Long.parseLong(x.image)+ Long.parseLong(y.image);
        }
}

List<List<Token>> lines() :
{
  List<List<Token>> finaltokens = new ArrayList<List<Token>>();
  List<Token> tokens;
}
{
    (tokens=line() { finaltokens.add(tokens); } | <LINE_COMMENT> | <NEWLINE>)* { return finaltokens; }
}

List<Token> line() :
{
  	Token t;
  	List<Token> tokens = new ArrayList<Token>();
}
{
    t=<IDENTIFIER> { tokens.add(t); }("," t=<IDENTIFIER> { tokens.add(t); })*
	{
      return tokens;
    }
}