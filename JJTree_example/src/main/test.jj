/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. E:\Workspace\cbc\JJTree_example\src\main\test.jj */
/*@egen*/options {
             
                 
  STATIC = false;
  JDK_VERSION = "1.8";
}

PARSER_BEGIN(Test)
package main;

public class Test/*@bgen(jjtree)*/implements TestTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTTestState jjtree = new JJTTestState();

/*@egen*/
  public static void main(String[] args) throws Exception {
    Test parser = new Test(new java.io.StringReader("class A; class B;"));
    SimpleNode root = parser.Program();
    root.dump("");
  }
}
PARSER_END(Test)

TOKEN :
{
     < CLASS : "class" >
  |  < SCOL  : ";" >
  |  < ID    : (["a"-"z","A"-"Z"])+ >
}

SKIP :
{
  " " | "\t" | "\r" | "\n"
}

SimpleNode Program()          : 
{/*@bgen(jjtree) Program */
  Program jjtn000 = new Program(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) Program */
  try {
/*@egen*/
  (Class_decl())* <EOF>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Class_decl()            :
{/*@bgen(jjtree) ClassDecl */
  ClassDecl jjtn000 = new ClassDecl(JJTCLASSDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ClassDecl */
  try {
/*@egen*/    
  <CLASS> <ID> <SCOL>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}